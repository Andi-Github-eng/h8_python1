{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Read Data CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Read csv data from specific folder\n",
    "file01 \t= 'C:/Users/Andi/H8_PFDS_DS_C1C2_3/Dataset/googleplaystore.csv'\n",
    "file02 \t= 'C:/Users/Andi/H8_PFDS_DS_C1C2_3/Dataset/googleplaystore_user_reviews.csv'\n",
    "df\t\t= pd.read_csv(file01)\n",
    "df_user\t= pd.read_csv(file02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "App                  0\n",
      "Category             0\n",
      "Rating            1474\n",
      "Reviews              0\n",
      "Size                 0\n",
      "Installs             0\n",
      "Type                 1\n",
      "Price                0\n",
      "Content Rating       0\n",
      "Genres               1\n",
      "Last Updated         0\n",
      "Current Ver          8\n",
      "Android Ver          2\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check NA values\n",
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop important columns for NA value\n",
    "df\t\t= df.dropna(subset=['Type', 'Genres'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "App                object\n",
      "Category           object\n",
      "Rating            float64\n",
      "Reviews             int64\n",
      "Size               object\n",
      "Installs          float64\n",
      "Type               object\n",
      "Price             float64\n",
      "Content Rating     object\n",
      "Genres             object\n",
      "Last Updated       object\n",
      "Current Ver        object\n",
      "Android Ver        object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Align the value to proper dtypes\n",
    "#print(df.dtypes)\n",
    "df['Price'] \t= df['Price'].apply(lambda x: x.replace('$', '').replace(' ', '')).astype('float')\n",
    "df['Installs']  = df['Installs'].apply(lambda x: x.replace(',', '').replace('+', '')).astype('float')\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Applikasi termahal ( $400.0) ==>  [\"I'm Rich - Trump Edition\"]\n",
      "Applikasi termurah ( $ 0.99 ) ==>  ['All-in-One Mahjong 3' 'World Racers family board game'\n",
      " 'SweetLand — Family Board Game' 'iBP Blood Pressure'\n",
      " 'Blood Pressure Companion' 'Nursing Care Plan NANDA Tables'\n",
      " 'palmPEDi: Pediatric Tape' 'ABG Master'\n",
      " 'Be the Expert in Phlebotomy - Professional Nursing' 'HD Widgets'\n",
      " 'Kairo XP (for HD Widgets)' 'B-52 Spirits of Glory Deluxe' 'CURSUM B'\n",
      " 'Neon Glow C - Icon Pack' 'Hitman Sniper' 'Koi Live Wallpaper' 'Go'\n",
      " 'A41 WatchFace for Android Wear Smart Watch' 'D+H Reaction Wall'\n",
      " 'Cut the Rope GOLD' \"Ghosts'n Goblins MOBILE\"\n",
      " \"Lock 'n' Roll Pro - Ad Free\" 'Planet O - Icon Pack'\n",
      " 'Obbligo o Verità? PRO' 'P-Home for KLWP'\n",
      " '[Sub/EMUI] P Pro - EMUI 8.1/8.0/5.X Theme'\n",
      " 'Volume Slider Like Android P Volume Control'\n",
      " 'Pacify (Android P theme) - Theme for Xperia™'\n",
      " 'Android P Style Icon Pack' 'pretty Easy privacy p≡p' 'P Icon Pack'\n",
      " 'Q Alerts: QAnon Drop Notifications, Research +++' 'Neon-R (Red)'\n",
      " 'Jurassic Life: T Rex Simulator' 'Mental Hospital V'\n",
      " 'W-History Standalone' 'Light X - Icon Pack' 'X-Plane to GPS'\n",
      " 'X Back - Icon Pack' 'Zombie Avengers:(Dreamsky)Stickman War Z'\n",
      " 'WhatsFake Pro (Ad free)' 'My baby firework (Remove ad)'\n",
      " 'Easy Hotspot Ad Free' 'Mupen64Plus AE (N64 Emulator)'\n",
      " 'AG Subway Simulator Mobile' \"Michael's AG Sound Board\"\n",
      " 'Watch Face Swiss AJ-6' 'AJ Gray Icon Pack' 'AJ Gray Dark Icon Pack'\n",
      " 'AJ Blue Icon Pack' 'AJ Turquoise Dark Icon Pack' 'AJ Orange Icon Pack'\n",
      " 'Glanceable Ap Watch Face' 'Nightenfell: Shared AR' 'BringGo AU & NZ'\n",
      " 'Ultimate Watch 2 watch face' 'F05WatchFace for Android Wear'\n",
      " 'INTERACTIVE CALCULUS PRO' 'AX Watch for WatchMaker'\n",
      " 'Ay Yıldız - Xperia Live Theme' 'YAKALA AY' 'Ice Crush 10.000 B.C.'\n",
      " 'Wolf of the BF:Commando MOBILE' 'My Virtual Boyfriend'\n",
      " 'Droid PRoCon BF3' 'Bi-Tank Ads Free' 'BI Barcode Scanner'\n",
      " 'Bk Bee Sales Manager' 'Basket Manager 2016 Pro'\n",
      " 'Basket Manager 2017 Pro' 'Sam.BN Pro' \"Bo's Matching Game\"\n",
      " 'Socle Commun BO du 23-04-2015' 'Infinity Dungeon VIP'\n",
      " 'BS Match Maker Premium' 'Little Magnet BT Pro' 'Watch Face BW Inter'\n",
      " 'Color Changer Pro [root]' 'Hitman GO' 'Trinomial Factoring Wizard'\n",
      " 'CA Speakers' 'CB Frequencies' 'Antenna Tool Premium' 'Frequencies'\n",
      " 'CE Map - Interactive Conan Exiles Map' 'Next Launcher 3D Bold-CF Theme'\n",
      " 'Dots puzzle' 'FAV KWGT' 'Pixxy KWGT' 'CI 174 Gray Icon Pack'\n",
      " 'All-night drugstore CI & Price' 'CI Attendance' 'F*ck This Game'\n",
      " '211:CK' 'FREE CHATS C.L.' 'OMEGA Black UI Theme - CM 12+'\n",
      " 'Ski Safari: Adventure Time'\n",
      " 'Chinese Chess 3D Online (Xiangqi, 象棋, co tuong)' 'UFO-CQ'\n",
      " 'DCUO|CR Calculator Pro' 'CS go bomb simulator' 'Emergency Brain CT'\n",
      " 'CT and XR Dose Calculator' 'CV-RECORD Pro' 'CW Studio ®'\n",
      " 'Morse Machine for Ham Radio' 'Online TV CZ/SK PRO' 'Reksio cz. 1'\n",
      " '10,000 Quotes DB (Premium)' 'ReDNAKET DB Normalization Tool'\n",
      " 'Diseño de columnas NTC - RSEE 2017' 'DK Primrose for KLWP'\n",
      " 'DL Image Manager' 'DM Die Roller 9000' 'Interactive NPC DM Tool'\n",
      " 'DW Contacts widget' 'ZOOKEEPER DX TouchEdition' 'Chronolink DX'\n",
      " 'DX Glow - Clock Widget' 'iCluster - The DX-Cluster database'\n",
      " 'Dress Up RagazzA13 DX' 'DZ Puzzle' 'Lost Journey (Dreamsky)'\n",
      " 'League of Stickman 2018- Ninja Arena PVP(Dreamsky)'\n",
      " 'Stickman Legends: Shadow Wars' 'Schlaumeier' 'E.G. Chess' 'El Chavo'\n",
      " \"Poker Equity Calculator Pro for No Limit Hold'em\" 'O Céu e o Inferno'\n",
      " 'EP Calipers' 'EP Coding' 'EU Flags Live Wallpaper'\n",
      " 'European War 6: 1804' 'Deus Ex GO' 'Device Info Ex Live Wallpaper'\n",
      " 'An Elite Warrior Ex' 'GO Contacts EX Black & Grey'\n",
      " 'Portable Wi-Fi hotspot Premium' 'FL Racing Manager 2015 Pro'\n",
      " 'Circle Colors Pack-FN Theme' 'Fruit Ninja Classic' 'FO Bixby' 'Mu.F.O.'\n",
      " 'FP VoiceBot']\n"
     ]
    }
   ],
   "source": [
    "# Find max and min Price Application which only 'Paid' Type\n",
    "max_price\t\t= df.query('Type ==\"Paid\"')['Price'].max()\n",
    "min_price\t\t= df.query('Type ==\"Paid\"')['Price'].min()\n",
    "list_max_Price=df.where(df['Price']==max_price).dropna(subset=['App'])\n",
    "list_min_Price=df.where(df['Price']==min_price).dropna(subset=['App'])\n",
    "print('Applikasi termahal ( $'+str(max_price)+') ==> ',list_max_Price['App'].unique())\n",
    "print('Applikasi termurah ( $',min_price,') ==> ',list_min_Price['App'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FAMILY                 1908\n",
      "GAME                    960\n",
      "TOOLS                   829\n",
      "BUSINESS                420\n",
      "MEDICAL                 396\n",
      "PERSONALIZATION         376\n",
      "PRODUCTIVITY            374\n",
      "LIFESTYLE               369\n",
      "FINANCE                 345\n",
      "SPORTS                  327\n",
      "COMMUNICATION           316\n",
      "HEALTH_AND_FITNESS      288\n",
      "PHOTOGRAPHY             281\n",
      "NEWS_AND_MAGAZINES      254\n",
      "SOCIAL                  239\n",
      "BOOKS_AND_REFERENCE     222\n",
      "TRAVEL_AND_LOCAL        219\n",
      "SHOPPING                202\n",
      "DATING                  171\n",
      "VIDEO_PLAYERS           164\n",
      "MAPS_AND_NAVIGATION     131\n",
      "EDUCATION               119\n",
      "FOOD_AND_DRINK          112\n",
      "ENTERTAINMENT           102\n",
      "AUTO_AND_VEHICLES        85\n",
      "LIBRARIES_AND_DEMO       84\n",
      "WEATHER                  79\n",
      "HOUSE_AND_HOME           74\n",
      "EVENTS                   64\n",
      "ART_AND_DESIGN           64\n",
      "PARENTING                60\n",
      "COMICS                   56\n",
      "BEAUTY                   53\n",
      "Name: Category, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Create new table to calculate Application by category\n",
    "columns_to_keep = ['App','Category']\n",
    "df_Category = df[columns_to_keep]\n",
    "df_Category = df_Category.drop_duplicates()\n",
    "print(df_Category['Category'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Applikasi terbanyak didownload  ['Google Play Books' 'Messenger – Text and Video Chat for Free'\n",
      " 'WhatsApp Messenger' 'Google Chrome: Fast & Secure' 'Gmail' 'Hangouts'\n",
      " 'Skype - free IM & video calls' 'Google Play Games' 'Subway Surfers'\n",
      " 'Facebook' 'Instagram' 'Google+' 'Google Photos'\n",
      " 'Maps - Navigate & Explore' 'Google Street View' 'Google' 'Google Drive'\n",
      " 'YouTube' 'Google Play Movies & TV' 'Google News']\n"
     ]
    }
   ],
   "source": [
    "# Calculate Application having most downloaded\n",
    "max_Installs = df['Installs'].max()\n",
    "list_max_Installs = df.where(df['Installs']==max_Installs).dropna(subset=['App'])\n",
    "print('Applikasi terbanyak didownload ',list_max_Installs['App'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>ART_AND_DESIGN</td>\n",
       "      <td>4.357377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>AUTO_AND_VEHICLES</td>\n",
       "      <td>4.190411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BEAUTY</td>\n",
       "      <td>4.278571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BOOKS_AND_REFERENCE</td>\n",
       "      <td>4.344970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BUSINESS</td>\n",
       "      <td>4.098479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>COMICS</td>\n",
       "      <td>4.181481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>COMMUNICATION</td>\n",
       "      <td>4.121401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>DATING</td>\n",
       "      <td>3.970149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>EDUCATION</td>\n",
       "      <td>4.364407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ENTERTAINMENT</td>\n",
       "      <td>4.135294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>EVENTS</td>\n",
       "      <td>4.435556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>FAMILY</td>\n",
       "      <td>4.187173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>FINANCE</td>\n",
       "      <td>4.115563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>FOOD_AND_DRINK</td>\n",
       "      <td>4.166316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>GAME</td>\n",
       "      <td>4.247593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>HEALTH_AND_FITNESS</td>\n",
       "      <td>4.243033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>HOUSE_AND_HOME</td>\n",
       "      <td>4.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>LIBRARIES_AND_DEMO</td>\n",
       "      <td>4.178125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>LIFESTYLE</td>\n",
       "      <td>4.093355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MAPS_AND_NAVIGATION</td>\n",
       "      <td>4.036441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MEDICAL</td>\n",
       "      <td>4.169625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>NEWS_AND_MAGAZINES</td>\n",
       "      <td>4.121569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PARENTING</td>\n",
       "      <td>4.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PERSONALIZATION</td>\n",
       "      <td>4.332215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PHOTOGRAPHY</td>\n",
       "      <td>4.156981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PRODUCTIVITY</td>\n",
       "      <td>4.183389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>SHOPPING</td>\n",
       "      <td>4.227072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>SOCIAL</td>\n",
       "      <td>4.247291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>SPORTS</td>\n",
       "      <td>4.218702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>TOOLS</td>\n",
       "      <td>4.041193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>TRAVEL_AND_LOCAL</td>\n",
       "      <td>4.069519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>VIDEO_PLAYERS</td>\n",
       "      <td>4.043333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>WEATHER</td>\n",
       "      <td>4.243056</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Rating\n",
       "Category                     \n",
       "ART_AND_DESIGN       4.357377\n",
       "AUTO_AND_VEHICLES    4.190411\n",
       "BEAUTY               4.278571\n",
       "BOOKS_AND_REFERENCE  4.344970\n",
       "BUSINESS             4.098479\n",
       "COMICS               4.181481\n",
       "COMMUNICATION        4.121401\n",
       "DATING               3.970149\n",
       "EDUCATION            4.364407\n",
       "ENTERTAINMENT        4.135294\n",
       "EVENTS               4.435556\n",
       "FAMILY               4.187173\n",
       "FINANCE              4.115563\n",
       "FOOD_AND_DRINK       4.166316\n",
       "GAME                 4.247593\n",
       "HEALTH_AND_FITNESS   4.243033\n",
       "HOUSE_AND_HOME       4.150000\n",
       "LIBRARIES_AND_DEMO   4.178125\n",
       "LIFESTYLE            4.093355\n",
       "MAPS_AND_NAVIGATION  4.036441\n",
       "MEDICAL              4.169625\n",
       "NEWS_AND_MAGAZINES   4.121569\n",
       "PARENTING            4.300000\n",
       "PERSONALIZATION      4.332215\n",
       "PHOTOGRAPHY          4.156981\n",
       "PRODUCTIVITY         4.183389\n",
       "SHOPPING             4.227072\n",
       "SOCIAL               4.247291\n",
       "SPORTS               4.218702\n",
       "TOOLS                4.041193\n",
       "TRAVEL_AND_LOCAL     4.069519\n",
       "VIDEO_PLAYERS        4.043333\n",
       "WEATHER              4.243056"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate Average Rating for each Category\n",
    "columns_to_keep = ['App','Category','Rating']\n",
    "df_Rating = df[columns_to_keep]\n",
    "df_Rating = df_Rating.dropna(subset=['Rating'])\n",
    "# print(df_Rating.shape)\n",
    "df_Rating = df_Rating.drop_duplicates()\n",
    "columns_to_keep = ['Category','Rating']\n",
    "df_Rating = df_Rating[columns_to_keep]\n",
    "df_Rating.groupby(['Category']).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>App</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Genres</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Action</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Action;Action &amp; Adventure</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Adventure</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Adventure;Action &amp; Adventure</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Adventure;Brain Games</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Video Players &amp; Editors</td>\n",
       "      <td>163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Video Players &amp; Editors;Creativity</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Video Players &amp; Editors;Music &amp; Video</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Weather</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Word</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>119 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       App\n",
       "Genres                                    \n",
       "Action                                 299\n",
       "Action;Action & Adventure               12\n",
       "Adventure                               73\n",
       "Adventure;Action & Adventure             5\n",
       "Adventure;Brain Games                    1\n",
       "...                                    ...\n",
       "Video Players & Editors                163\n",
       "Video Players & Editors;Creativity       1\n",
       "Video Players & Editors;Music & Video    2\n",
       "Weather                                 79\n",
       "Word                                    23\n",
       "\n",
       "[119 rows x 1 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate Number of Application for each Genre\n",
    "columns_to_keep = ['App','Genres']\n",
    "df_Genres = df[columns_to_keep]\n",
    "df_Genres = df_Genres.dropna(subset=['Genres'])\n",
    "df_Genres = df_Genres.drop_duplicates()\n",
    "# print(df_Genres.shape)\n",
    "df_Genres.groupby(['Genres']).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9366, 3)\n"
     ]
    }
   ],
   "source": [
    "# Calculate Rating Statistic for each Category\n",
    "columns_to_keep = ['App','Genres','Rating']\n",
    "df_Ratstat = df[columns_to_keep]\n",
    "df_Ratstat = df_Ratstat.dropna(subset=['Rating'])\n",
    "print(df_Ratstat.shape)\n",
    "df_Ratstat = df_Ratstat.drop_duplicates()\n",
    "from scipy import stats\n",
    "table = pd.pivot_table(df_Ratstat, index=['Genres'],values=\"Rating\",\n",
    "                       aggfunc={np.mean, np.median, stats.mode})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Genres</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Action</td>\n",
       "      <td>4.244863</td>\n",
       "      <td>4.3</td>\n",
       "      <td>([4.4], [45])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Action;Action &amp; Adventure</td>\n",
       "      <td>4.316667</td>\n",
       "      <td>4.3</td>\n",
       "      <td>([4.3], [4])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Adventure</td>\n",
       "      <td>4.178873</td>\n",
       "      <td>4.3</td>\n",
       "      <td>([4.4], [13])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Adventure;Action &amp; Adventure</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>4.2</td>\n",
       "      <td>([4.2], [2])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Adventure;Brain Games</td>\n",
       "      <td>4.600000</td>\n",
       "      <td>4.6</td>\n",
       "      <td>([4.6], [1])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Video Players &amp; Editors</td>\n",
       "      <td>4.043243</td>\n",
       "      <td>4.2</td>\n",
       "      <td>([4.4], [19])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Video Players &amp; Editors;Creativity</td>\n",
       "      <td>4.100000</td>\n",
       "      <td>4.1</td>\n",
       "      <td>([4.1], [1])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Video Players &amp; Editors;Music &amp; Video</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>([4.0], [2])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Weather</td>\n",
       "      <td>4.243056</td>\n",
       "      <td>4.3</td>\n",
       "      <td>([4.2], [13])</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Word</td>\n",
       "      <td>4.334783</td>\n",
       "      <td>4.3</td>\n",
       "      <td>([4.2], [4])</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>115 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           mean  median           mode\n",
       "Genres                                                                \n",
       "Action                                 4.244863     4.3  ([4.4], [45])\n",
       "Action;Action & Adventure              4.316667     4.3   ([4.3], [4])\n",
       "Adventure                              4.178873     4.3  ([4.4], [13])\n",
       "Adventure;Action & Adventure           4.300000     4.2   ([4.2], [2])\n",
       "Adventure;Brain Games                  4.600000     4.6   ([4.6], [1])\n",
       "...                                         ...     ...            ...\n",
       "Video Players & Editors                4.043243     4.2  ([4.4], [19])\n",
       "Video Players & Editors;Creativity     4.100000     4.1   ([4.1], [1])\n",
       "Video Players & Editors;Music & Video  4.000000     4.0   ([4.0], [2])\n",
       "Weather                                4.243056     4.3  ([4.2], [13])\n",
       "Word                                   4.334783     4.3   ([4.2], [4])\n",
       "\n",
       "[115 rows x 3 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
